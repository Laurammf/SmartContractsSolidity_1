
//SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.6;


/// @title ERC-721 Non-Fungible Token Standard
/// @dev See https://eips.ethereum.org/EIPS/eip-721
///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.
interface ERC721 /* is ERC165 */ {
    /// @dev This emits when ownership of any NFT changes by any mechanism.
    ///  This event emits when NFTs are created (`from` == 0) and destroyed
    ///  (`to` == 0). Exception: during contract creation, any number of NFTs
    ///  may be created and assigned without emitting Transfer. At the time of
    ///  any transfer, the approved address for that NFT (if any) is reset to none.

    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
    /// @dev This emits when the approved address for an NFT is changed or
    ///  reaffirmed. The zero address indicates there is no approved address.
    ///  When a Transfer event emits, this also indicates that the approved
    ///  address for that NFT (if any) is reset to none.
   
   
   // event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
    /// @dev This emits when an operator is enabled or disabled for an owner.
    ///  The operator can manage all NFTs of the owner.
  
  
  //  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
    /// @notice Count all NFTs assigned to an owner
    /// @dev NFTs assigned to the zero address are considered invalid, and this
    ///  function throws for queries about the zero address.
    /// @param _owner An address for whom to query the balance
    /// @return The number of NFTs owned by `_owner`, possibly zero
 
 
    function balanceOf(address _owner) external view returns (uint256);
    /// @notice Find the owner of an NFT
    /// @dev NFTs assigned to zero address are considered invalid, and queries
    ///  about them do throw.
    /// @param _tokenId The identifier for an NFT
    /// @return The address of the owner of the NFT
 //
    function ownerOf(uint256 _tokenId) external view returns (address);
    /// @notice Transfers the ownership of an NFT from one address to another address
    /// @dev Throws unless `msg.sender` is the current owner, an authorized
    ///  operator, or the approved address for this NFT. Throws if `_from` is
    ///  not the current owner. Throws if `_to` is the zero address. Throws if
    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function
    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls
    ///  `onERC721Received` on `_to` and throws if the return value is not
    ///  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.
    /// @param _from The current owner of the NFT
    /// @param _to The new owner
    /// @param _tokenId The NFT to transfer
    /// @param data Additional data with no specified format, sent in call to `_to`


// OKO esatamente uguale al transferfrom ma eh safe. 
   function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory data) external payable;
    /// @notice Transfers the ownership of an NFT from one address to another address
    /// @dev This works identically to the other function with an extra data parameter,
    ///  except this function just sets data to "".
    /// @param _from The current owner of the NFT
    /// @param _to The new owner
    /// @param _tokenId The NFT to transfer

// ha degli dati adizionali che manda qcosa a me.
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;
    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE
    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE
    ///  THEY MAY BE PERMANENTLY LOST
    /// @dev Throws unless `msg.sender` is the current owner, an authorized
    ///  operator, or the approved address for this NFT. Throws if `_from` is
    ///  not the current owner. Throws if `_to` is the zero address. Throws if
    ///  `_tokenId` is not a valid NFT.
    /// @param _from The current owner of the NFT
    /// @param _to The new owner
    /// @param _tokenId The NFT to transfer



    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;
    /// @notice Change or reaffirm the approved address for an NFT
    /// @dev The zero address indicates there is no approved address.
    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized
    ///  operator of the current owner.
    /// @param _approved The new approved NFT controller
    /// @param _tokenId The NFT to approve
  
  
  
  // function approve(address _approved, uint256 _tokenId) external payable;
    /// @notice Enable or disable approval for a third party ("operator") to manage
    ///  all of `msg.sender`'s assets
    /// @dev Emits the ApprovalForAll event. The contract MUST allow
    ///  multiple operators per owner.
    /// @param _operator Address to add to the set of authorized operators
    /// @param _approved True if the operator is approved, false to revoke approval
 
 
 
 //   function setApprovalForAll(address _operator, bool _approved) external;
    /// @notice Get the approved address for a single NFT
    /// @dev Throws if `_tokenId` is not a valid NFT.
    /// @param _tokenId The NFT to find the approved address for
    /// @return The approved address for this NFT, or the zero address if there is none



//    function getApproved(uint256 _tokenId) external view returns (address);
    /// @notice Query if an address is an authorized operator for another address
    /// @param _owner The address that owns the NFTs
    /// @param _operator The address that acts on behalf of the owner
    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise
 
 
 
 //   function isApprovedForAll(address _owner, address _operator) external view returns (bool);
}
/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension
/// @dev See https://eips.ethereum.org/EIPS/eip-721
///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.
interface ERC721Metadata /* is ERC721 */ {
    /// @notice A descriptive name for a collection of NFTs in this contract
    function name() external view returns (string memory _name);
    /// @notice An abbreviated name for NFTs in this contract
    function symbol() external view returns (string memory _symbol);
    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.
    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC
    ///  3986. The URI may point to a JSON file that conforms to the "ERC721
    ///  Metadata JSON Schema".
    function tokenURI(uint256 _tokenId) external view returns (string memory);
}

contract MMFNFT is ERC721,ERC721Metadata{

    constructor(uint f){
        artist=msg.sender;
        numberTokens=0;
        fee=f;
    }

    string private NFTname="MMFArt01";
    string private NFTsymbol="MMF01";
    string private defaultURI="http://www.paolocoletti.it/crypto/NFT/coletti.json";
    address private artist;
    uint256 private numberTokens; // 2^255 
    mapping(uint256=>address) private tokenOwner;
    mapping(uint256=>string) private tokenURIs;
    mapping(address=>uint) private howManyTokens; //OKO quanti token ha ogni persona
    uint public fee;
    mapping (address => uint) public balances;

    // per il punto 6
    mapping(uint256 => uint) private proposalPrice; // contains the price for the token
    mapping(uint256 => address) private tokenProposals; //memmorizzare quale Token il compratore vuole
    mapping(uint256 => uint) private proposalTime;   // timestamp of proposal

 

// ho lasciato tutto pubblico per debugging. 
/*
    string public NFTname="MMFArt01";
    string public NFTsymbol="MMF01";
    string public defaultURI="http://www.paolocoletti.it/crypto/NFT/coletti.json";
    address public artist;
    uint256 public numberTokens; // 2^255 
    mapping(uint256=>address) public tokenOwner;
    mapping(uint256=>string) public tokenURIs;
    mapping(address=>uint) public howManyTokens; //OKO quanti token ha ogni persona
    uint public fee;
    mapping (address => uint) public balances;

    // per il punto 6
    mapping(uint256 => uint) public proposalPrice; // contains the price for the token
    mapping(uint256 => address) public tokenProposals; //memmorizzare quale Token il compratore vuole
    mapping(uint256 => uint) public proposalTime;   // timestamp of proposal
*/

    function deposit() payable public{
        balances[msg.sender]+=msg.value;
    }
    function name() public override view returns (string memory){
        return NFTname;
    }
    function symbol() public override view returns (string memory){
        return NFTsymbol;
    }
    function tokenURI(uint256 _tokenId) public override view returns (string memory){
        require(_tokenId<numberTokens, "token non ancora creato!"); //oko. tokenid sara 1,2,2...?
        return tokenURIs[_tokenId];
    }
    function _mint(string memory _tokenURI) public returns(uint256){
        require(msg.sender==artist, "Non sei lartista, usi la funzioni per outsider!"); //*
        //*per fare mint a unaltra persona, bisogna cambiare questo qua
        // in teoria bisognerebbe controlare anche se il limit di tokens non stai raggiunto
        // il limit di tokens eh 2^255
        uint256 tokenID=numberTokens;
        numberTokens+=1;
        tokenOwner[tokenID]=msg.sender; // allinizio proprietario eh lartist
        howManyTokens[msg.sender]+=1;
        if (bytes(_tokenURI).length==0){
            tokenURIs[tokenID]=defaultURI; // questo tokenURI eh la funzione sopra o la struttura dati?
        } else {
            tokenURIs[tokenID]=_tokenURI;
        }
    emit Transfer(address(0), msg.sender, tokenID);
    return tokenID;
    }
    function _mintOUTSIDER(string memory _tokenURI) public returns(uint256){
        require(msg.sender!=artist, "Sei lartista, utilizzi latra funzione!"); 
        uint256 tokenID=numberTokens;
        numberTokens+=1;
        balances[msg.sender]-=fee;
        balances[artist]+=fee;
        tokenOwner[tokenID]=msg.sender;
        howManyTokens[msg.sender]+=1;
        if (bytes(_tokenURI).length==0){
            tokenURIs[tokenID]=defaultURI; // questo tokenURI eh la funzione sopra o la struttura dati?
        } else {
            tokenURIs[tokenID]=_tokenURI;
        }
    emit Transfer(address(0), msg.sender, tokenID);
    return tokenID;
    }
    function balanceOf(address _owner) public override view returns (uint256){ 
        return howManyTokens[_owner];
    }
    function ownerOf(uint256 _tokenId) public override view returns (address){
        // ogni volta che tokenId eh parametro, bisogna controllare che esista tokenid
        require(_tokenId<numberTokens,"Token does not exist");
        return tokenOwner[_tokenId];
    }


    function _transfer(address _to, uint _tokenId) private{
        // attenzione non facciamo nessun controllo, solo uso interno
        address originalOwner=tokenOwner[_tokenId];
        howManyTokens[originalOwner]-=1; //ridurre la quantita di token del signor orwner
        tokenOwner[_tokenId]= _to; // passare la proprieta al signor to 
        howManyTokens[_to]+=1; //aumentare proprieta di tokend el signor to 
        emit Transfer(originalOwner, _to, _tokenId);// informare il wallet del original owner che il token eh passato a unaltra persona

    }
    function transferFrom(address _from, address _to, uint256 _tokenId) public override payable{
        require(_tokenId<numberTokens,"Token does not exist");
        require(_from==tokenOwner[_tokenId],"From none proprietario");
        // il proprietario deve chiamare la funzione, in teoria potremmo anche accetare un deleagto
        require(_from==msg.sender,"Token is not yours"); 
        // potremmo anche controllare che _to non sia lindirizzo zero 
        _transfer(_to,_tokenId);
    }
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory data) public override payable{
          transferFrom(_from,_to,_tokenId);     
    }
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public override payable{
          transferFrom(_from,_to,_tokenId);     
      }
    function propose(uint price, uint whichToken) public payable{   
        require((tokenProposals[whichToken] == address(0x0)), "Esiste gia una richiesta per quel token!");   
        require(msg.sender!=artist, "Sei lartista, utilizzi latra funzione!"); 
        require(balances[msg.sender]>price, "Non hai soldi sufficiente!");
        require(whichToken<numberTokens, "Questo token non esiste!");
        proposalPrice[whichToken]=price;
        proposalTime[whichToken]=block.timestamp;
        tokenProposals[whichToken]=msg.sender;
    }
    function refuse(uint whichToken) public {
        require(msg.sender==artist, "Non sei lartista, usi la funzioni per outsider!");
        delete(proposalPrice[whichToken]);
        delete(proposalTime[whichToken]);
        delete(tokenProposals[whichToken]);
    }
    function accept(uint whichToken) public { 
        require(msg.sender==artist, "Non sei lartista, usi la funzioni per outsider!"); //*
        balances[(tokenProposals[whichToken])]-=proposalPrice[whichToken];
        balances[artist]+=(proposalPrice[whichToken]+fee);
        tokenOwner[whichToken]=tokenProposals[whichToken];
        howManyTokens[artist]-=1;
        howManyTokens[tokenProposals[whichToken]]+=1;
        delete(proposalPrice[whichToken]);
        delete(proposalTime[whichToken]);
        delete(tokenProposals[whichToken]);
    }

// lartista prende i soldi per se 
    function givemymoney_Artist() public payable{
        require(msg.sender==artist);
        payable(artist).transfer((balances[artist])-fee);
        balances[artist]=0;
    }

    
// funzione dove il "cliente" richiede un rimborso degli soldi quando si passa troppo tempo
// tempo dato, solo per testare: 1 minuto. Si potrebbe anche fare tempo come input della funzione
// di solito quando provo aggirare il sistema, solo il primo requirement basta per non lasciarmi, 
// ma piu requirements piu sicuro, quindi lascio tutti
    function toolate_refuns(uint whichToken) public payable{
        require(msg.sender==tokenProposals[whichToken], "Lei none proprietario di quel token!");
        require((tokenProposals[whichToken] != address(0x0)), "Non esiste una richiesta in corso per quel token!"); 
        require(block.timestamp>proposalTime[whichToken] + 60 seconds, "Il tempo none passato ancora!");
        require(whichToken<numberTokens, "Quel token non esiste!");
        payable(msg.sender).transfer(proposalPrice[whichToken]);
        delete(proposalPrice[whichToken]);
        delete(proposalTime[whichToken]);
        delete(tokenProposals[whichToken]);
    }

}